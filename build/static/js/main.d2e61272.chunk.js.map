{"version":3,"sources":["microapp.js","SearchBar.js","SearchResult.js","index.js"],"names":["navigator","userAgent","vendor","window","opera","getAyoba","SearchBarContainer","styled","div","InputStyle","input","ButtonStyle","button","SearchBar","props","type","onKeyDown","searchMeme","placeholder","SearchResultContainer","MemeImageContainer","MemeImage","img","SearchResult","memes","map","meme","index","onClick","sendMeme","images","fixed_height","url","key","src","alt","App","search","query","axios","get","then","response","setState","data","console","log","state","catch","error","event","target","value","preventDefault","this","Fragment","Component","render","document","getElementById"],"mappings":"kJAMA,WACkBA,UAAUC,WAAaD,UAAUE,QAAUC,OAAOC,MAPxDC,I,opBCGZ,IAAMC,EAAqBC,IAAOC,IAAV,KAOlBC,EAAaF,IAAOG,MAAV,KAQVC,EAAcJ,IAAOK,OAAV,KA2BFC,EAhBG,SAACC,GACjB,OACE,kBAACR,EAAD,KACE,kBAACG,EAAD,CACEM,KAAK,OACLC,UAAWF,EAAMG,WACjBC,YAAa,qBAGf,kBAACP,EAAD,KACE,kBAAC,IAAD,S,0oBCpCR,IAAMQ,EAAwBZ,IAAOC,IAAV,KAarBY,EAAqBb,IAAOC,IAAV,KASlBa,EAAYd,IAAOe,IAAV,KA4BAC,MArBf,SAAsBT,GACpB,OACE,kBAACK,EAAD,KACGL,EAAMU,MAAMC,KAAI,SAACC,EAAMC,GACtB,OACE,kBAACP,EAAD,CACEQ,QAASd,EAAMe,SAASH,EAAKI,OAAOC,aAAaC,KACjDC,IAAKN,GAEL,kBAACN,EAAD,CACEY,IAAKN,EACLO,IAAKR,EAAKI,OAAOC,aAAaC,IAC9BG,IAAKR,UCjCbS,G,oEACJ,aAAe,IAAD,8BACZ,gBAMFC,OAAS,SAACC,GACRC,IACGC,IADH,iDAE8CF,EAF9C,oCAIGG,MAAK,SAACC,GACL,EAAKC,SAAS,CACZnB,MAAOkB,EAASE,KAAKA,OAEvBC,QAAQC,IAAI,EAAKC,MAAMvB,UAExBwB,OAAM,SAACC,GACNJ,QAAQC,IAAI,QAASG,OAnBb,EAuBdpB,SAAW,SAACG,GAGVa,QAAQC,IAAId,IA1BA,EA6Bdf,WAAa,SAACiC,EAAOZ,GACnBA,EAAQY,EAAMC,OAAOC,MACH,UAAdF,EAAMjB,MACRiB,EAAMG,iBACN,EAAKhB,OAAOC,KA/Bd,EAAKS,MAAQ,CACXvB,MAAO,IAHG,E,gEAsCZ8B,KAAKjB,OAAO,c,+BAIZ,OACE,kBAAC,IAAMkB,SAAP,KACE,kBAAC,EAAD,CAAWtC,WAAYqC,KAAKrC,aAC5B,kBAAC,EAAD,CACEO,MAAO8B,KAAKP,MAAMvB,MAClBK,SAAUyB,KAAKzB,gB,GAhDP2B,cAuDlBC,iBAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.d2e61272.chunk.js","sourcesContent":["var Ayoba = getAyoba();\n\n/**\n * Determine the mobile operating system and returns the\n * proper javascript interface\n */\nfunction getAyoba() {\n  var userAgent = navigator.userAgent || navigator.vendor || window.opera;\n\n  // Windows Phone must come first because its UA also contains \"Android\"\n  // if (/windows phone/i.test(userAgent)) {\n  //   return null;\n  // }\n\n  // if (/android/i.test(userAgent)) {\n  //   return Android;\n  // }\n\n  // // iOS detection from: http://stackoverflow.com/a/9039885/177710\n  // if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {\n  //   return null; // todo\n  // }\n\n  return \"unknown\";\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Search } from \"react-feather\";\nconst SearchBarContainer = styled.div`\n  width: 100%;\n  background-color: #e9e9e9;\n  padding: 10px;\n  display: flex;\n`;\n\nconst InputStyle = styled.input`\n    padding: 8px;\n    font-size: 17px;\n    border: none;\n    font-weight: bold;\n}\n`;\n\nconst ButtonStyle = styled.button`\n  float: right;\n  padding: 6px 10px;\n  margin-right: 16px;\n  background: #ddd;\n  font-size: 17px;\n  border: none;\n  cursor: pointer;\n  width: 100px;\n`;\n\nconst SearchBar = (props) => {\n  return (\n    <SearchBarContainer>\n      <InputStyle\n        type=\"text\"\n        onKeyDown={props.searchMeme}\n        placeholder={\"Search memestack\"}\n      ></InputStyle>\n\n      <ButtonStyle>\n        <Search />\n      </ButtonStyle>\n    </SearchBarContainer>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst SearchResultContainer = styled.div`\n  // display: flex;\n  // flex-wrap: wrap;\n  // justify-content: center;\n  // align-items: center;\n\n  z-index: 0;\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap;\n`;\n\nconst MemeImageContainer = styled.div`\n  margin: 30px auto;\n  width: 300px;\n  border-radius: 40px;\n  cursor: pointer;\n  -webkit-transition: 0.4s;\n  transition: 0.4s;\n`;\n\nconst MemeImage = styled.img`\n  width: 100%;\n  border-radius: 15px;\n  object-fit: cover;\n  height: 300px;\n`;\n\nfunction SearchResult(props) {\n  return (\n    <SearchResultContainer>\n      {props.memes.map((meme, index) => {\n        return (\n          <MemeImageContainer\n            onClick={props.sendMeme(meme.images.fixed_height.url)}\n            key={index}\n          >\n            <MemeImage\n              key={index}\n              src={meme.images.fixed_height.url}\n              alt={index}\n            ></MemeImage>\n          </MemeImageContainer>\n        );\n      })}\n    </SearchResultContainer>\n  );\n}\n\nexport default SearchResult;\n","// dc6zaTOxFJmzC\n\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport SearchBar from \"./SearchBar\";\nimport axios from \"axios\";\nimport SearchResult from \"./SearchResult\";\nimport \"./global.css\";\nimport \"typeface-roboto\";\nimport Ayoba from \"./microapp.js\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      memes: [],\n    };\n  }\n\n  search = (query) => {\n    axios\n      .get(\n        `https://api.giphy.com/v1/gifs/search?q=${query}&limit=24&api_key=dc6zaTOxFJmzC`\n      )\n      .then((response) => {\n        this.setState({\n          memes: response.data.data,\n        });\n        console.log(this.state.memes);\n      })\n      .catch((error) => {\n        console.log(\"Error\", error);\n      });\n  };\n\n  sendMeme = (url) => {\n    // Ayoba.sendMedia(url, \"image/gif\");\n    // Ayoba.finish();\n    console.log(url);\n  };\n\n  searchMeme = (event, query) => {\n    query = event.target.value;\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n      this.search(query);\n    }\n  };\n\n  componentDidMount() {\n    this.search(\"trending\");\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <SearchBar searchMeme={this.searchMeme}></SearchBar>\n        <SearchResult\n          memes={this.state.memes}\n          sendMeme={this.sendMeme}\n        ></SearchResult>\n      </React.Fragment>\n    );\n  }\n}\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}